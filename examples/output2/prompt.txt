#NAME gh-ai
#SCRIPTING LANGUAGE "JavaScript"
/** #CHATLANGUAGE "English" */
#DESCRIPTION "I want you to create a gh extension that consist in a JavaScript program that reads the user input by a txt file and is parsed using this rules: 

# The root of the prompt object it will search for a list of parameters
prompt -> (%HASH_SYMBOL properties {% buildPropertyList %}):* %EOF {% buildObject %}

# All the different properties that the file can have, the order or appearance doesn't matter 
# but only one property type per file 
properties -> 
    %NAME %LANG_CASE_WORD              {% buildProperty['name'] %}
  | %SCRIPT_LANGUAGE %STRING           {% buildProperty['scriptLanguage'] %}
  | %DESCRIPTION %STRING               {% buildProperty['description'] %}
  | %HELP %STRING                      {% buildProperty['help'] %}
  | %PARAMETERS (parameter {% id %}):+ {% buildProperty['parameters'] %}
  | %EXAMPLES (example {% id %}):+     {% buildProperty['examples'] %}
  | %CHAT_LANGUAGE %STRING             {% buildProperty['chatLanguage'] %}

# parameter rule, indicates that each parameter contains a name and a description
parameter -> %HASH_SYMBOL %NAME %STRING %HASH_SYMBOL %DESCRIPTION %STRING    {% buildParameter %}

# example rule, indicates that each example contains an input and an output 
example -> %HASH_SYMBOL %INPUT %STRING %HASH_SYMBOL %EXPECTED_OUTPUT %STRING {% buildExample %}

To acomplish this you can use nearley and moo libraries to create the grammar. With this the main program can parse the txt file and 
create an object that follows the rules: 
 {
  name: 'gh-ai',
  scriptLanguage: 'JavaScript',
  description: '123',
  parameters: [
    { name: '-d, --debug', description: 'Descripci√≥n del parametro 1' },
    { name: '-t, --type', description: 'ALOHA' }
  ],
  help: 'this is how i want the help function to appear',
  examples: [
    { input: 'Ejemplo01', expectedOutput: 'Resultado 01' },
    { input: 'Ejemplo02', expectedOutput: 'Resultado 02' },
    { input: 'Ejemplo03', expectedOutput: 'Resultado 03' },
    { input: 'Ejemplo04', expectedOutput: 'Resultado 04' }
  ]
}

Use the zod library to create an schema and create a function tha check if the 
output given by the parsing function is correct.Then using the openai api create 
a prompt that has a system prompt and a user prompt created using the content of
the literal object parsed and checked in the previous functions. Finally call 
the openai api to create a completions with the created prompt and parse the 
structured result."

#PARAMETERS 
  #NAME "--debug"
  #DESCRIPTION "Allow the program to output more information of the program execution"
  #NAME "--generate-json"
  #DESCRIPTION "if active will output the resulting object from the parse function only if is accepted by the schema check function"